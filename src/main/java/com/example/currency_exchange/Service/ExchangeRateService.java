package com.example.currency_exchange.Service;

import com.example.currency_exchange.Model.Currency;
import com.example.currency_exchange.Model.ExchangesRates;
import com.example.currency_exchange.Repository.ExchangeRateRepository;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDateTime;
import java.util.Map;

@Service
public class ExchangeRateService {
    private final RestTemplate restTemplate = new RestTemplate();
    private final ExchangeRateRepository repository;

    public Double getExchangeRate(String baseCurrency, String targetCurrency) {
        String url = "https://apilayer.net/api/live?access_key=d966635574d010d33662189c101700a4&currencies=EUR,RUB,KGS&source=USD&format=1";
        ResponseEntity<Map> response = restTemplate.getForEntity(url, Map.class);

        Map<String, Object> quotes = (Map<String, Object>) response.getBody().get("quotes");

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "USDEUR")
        String currencyKey = baseCurrency.toUpperCase() + targetCurrency.toUpperCase();

        if (quotes == null || !quotes.containsKey(currencyKey)) {
            throw new IllegalArgumentException("‚ùå –û—à–∏–±–∫–∞: API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—É—Ä—Å " + currencyKey + ". JSON-–æ—Ç–≤–µ—Ç: " + response.getBody());
        }

        System.out.println("üí∞ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫—É—Ä—Å " + currencyKey + ": " + quotes.get(currencyKey));

        return (Double) quotes.get(currencyKey);
    }



    public ExchangeRateService(ExchangeRateRepository repository) {
        this.repository = repository;
    }


    public void saveExchangeRate(int baseCurrency, int targetCurrency, BigDecimal rate) {
        rate = rate.setScale(6, RoundingMode.HALF_UP); // –û–∫—Ä—É–≥–ª—è–µ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        ExchangesRates exchangeRate = new ExchangesRates(baseCurrency, targetCurrency, rate);
        repository.save(exchangeRate);
    }
    @Scheduled(fixedRate = 86400000)
    @Scheduled(fixedRate = 86400000)
    public void updateRates() {
        try {
            Double rate = getExchangeRate("USD", "EUR");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ null –ª–∏ rate
            if (rate == null) {
                throw new IllegalArgumentException("–û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª null –≤–º–µ—Å—Ç–æ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç!");
            }

            saveExchangeRate(1, 2, BigDecimal.valueOf(rate));
            System.out.println("‚úÖ –ö—É—Ä—Å USD ‚Üí EUR –æ–±–Ω–æ–≤–ª–µ–Ω: " + rate);
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ updateRates: " + e.getMessage());
            e.printStackTrace();
        }
    }



}
